<?php
/* 
 * hook_menu
 */
   function es_webform_menu() {
   	
	$items = array();
  $items['dashboard'] = array(
      'page callback' => 'getDashboard',
      'type' => MENU_CALLBACK,
      //'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );
  $items['product_edit'] = array(
      'page callback' => 'getProductEdit',
      'type' => MENU_CALLBACK,
      //'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );    
    return $items;
  }

	/*
	 * render dashboard
	 */
	function getDashboard() {
		$dashboard = new marketSpaceDashboard;
		$magento = new magento;
		$products = $dashboard->renderProductGrid();
		$output = "<ul class = 'marketspace_dashboard_grid'>";
    
		foreach($products as $product) {
		  $product_info = $product->product_id . "," . $product->set . "," . $product->type;
			$output .= "<li><a href='product_edit?info=" . urlencode($product_info)
				. "'>" . $product->name . "</a></li>";
		}
		$output = $output . "</ul>";
		return $output;
	}   

  /*
   * render product edit
   */
  function getProductEdit() {
    return drupal_get_form('product_edit_form');
    
  }  

function product_edit_form($form_state) {
    /*
     * get url params (encrypted) and
     * get webform that corresponds to the products
     * attribute set
     */
    $product = new magento_product;
    $product_edit = new product_edit;
    $magento = new magento;
    $magento_product_attributes = new magento_product_attributes;
    //$product_string = $magento->decryptText(urldecode($_GET["info"]));
    //watchdog('form check', 'get <pre>%get</pre> <br />post <pre>%post</pre> <br /><pre>session
    //  %session</pre>',array('%get'=>print_r($_GET,true), '%post'=>print_r($_POST,true), '%session'=>print_r($_SESSION,true)),WATCHDOG_NOTICE);
    $valid_form = true;
    /*
     * this done for ajax managed files. if you have
     * info then set info session. Otherwise get the info
     * session. If there is not one then $valid form will
     * be false so don't build form
     */
    if(isset($_GET["info"])) {
      variable_set('info', urldecode($_GET["info"]));
    } else {
      $valid_form = variable_get('info');
    }
    if(isset($_GET['q']) && $valid_form) {
      $product_string = urldecode(variable_get('info'));
      $product_data = explode(",", $product_string);
      
  		//get webform nid by attribute set attribute
  		$node_webform_id = $product->getWebformIdByAttributeSetAndType($product_data[1], $product_data[2]);
  		if(count($node_webform_id) == 1) { //make sure just one webform	TODO:- may want to have multiple
  			$product_id = $product_data[0];
  			$node = node_load($node_webform_id[0]->entity_id);
  			$webform = $node->webform["components"];
  			//get all additional attribute codes that need to be called in api
  			$additional_attributes = array();
  			foreach($webform as $component) {
  				if(isset($component['extra']['magento_attribute_code']))	{
  					if($attribute_data = $magento_product_attributes->get_stored_magento_attribute_data($component['extra']['magento_attribute_code'])) {
  						$attribute = unserialize($attribute_data->data);
  						if(!($product->isCoreMagentoAttribute($attribute->attribute_code)))	{
  							$additional_attributes['additional_attributes'][] = $attribute->attribute_code;
  						}
  					}
  				}
  			}
  			//get this products data from magento
  			//TODO: - needs to be a custom webservices that also checks ownership by a passed product id
      	$product_obj = $product->getProductById($product_data[0], $additional_attributes);
  			//put additional attributes on same level as core magento attributes. So easier to work with
  			//don't worry about multi select yet
  			foreach($product_obj->additional_attributes as $attr) {
  				$product_obj->{$attr->key} = $attr->value;
  			}
  			 
        $form['product-edit-form'] = array(
          '#markup' => '<div>' . t('Product Edit Form')
            . '</div>',
          '#attached' => array(
            'js' => array(drupal_get_path('module', 'es_webform') . '/js/accordion_tabs.js'),
            'css' => array(drupal_get_path('module', 'es_webform') . '/css/es_webform.css'),
          ),
        );
  			$form['view-product'] = array(
  				'#markup' => t('<p><a href="@link" target="_blank">View Product</a></p>', array('@link' => $product->base_url . $product_obj->url_path)),
  			);
  			//set product id and edit node id - for processing the form for magento
  			$form['product_id'] = array('#type'=>'hidden', '#value' => $product_data[0]);
  			$form['product_edit_node_id'] = array('#type'=>'hidden', '#value' => $node_webform_id[0]->entity_id);
        $custom_magento_components = array("categories", "custom_options", "images");
        //display the form components accordion
        $current_fieldset = ""; //all components must be in a fieldset   
        foreach($webform as $component) {
          if(isset($component['extra']['magento_attribute_code'])) {
            if($attribute_data = $magento_product_attributes->get_stored_magento_attribute_data($component['extra']['magento_attribute_code'])) {
              $attribute = unserialize($attribute_data->data);
              //add element to form with data prepopultated
              $form[$current_fieldset][$attribute->attribute_code] = $product_edit->create_attribute_input($attribute, $form_state, $component, $product_obj);
            }
  				} elseif(isset($component['extra']['magento_attribute_code_name'])) {
  					if($component['extra']['magento_attribute_code_name'] == 'categories') {
  						$category = new magento_product_category;
  						$value_path = "";
  				    $the_path = array_searchRecursive("Array", $component, $strict=false, $path=array(), $value_path);
  				    $checked_categories = explode(",",$value_path);
  						$selected_categories = array();
  						foreach($product_obj->{$component['extra']['magento_attribute_code_name']} as $key=>$cat) {
  							$selected_categories[$cat] = 1;
  						}
  						//TODO use a different more abstract function for category rendering - this is messy
  						//categories in input formstate are at: submitted[profile_information_header][venue_sweets_categories][categories]
  				    $categories = $category->get_categories($checked_categories, $excluded_categories = array(2));
  						$category->create_category_checkboxes($categories, $form, $component, true, $selected_categories);
  						$form[$current_fieldset]['categories'] = $form['categories']; //should probably clean this up so we can avoid the unset and this
  						unset($form['categories']);
  					} elseif($component['extra']['magento_attribute_code_name'] == 'product_image') {
                $magento_media = new magento_media;
                $images = $magento_media->get_all_media($product_id);
                //tile all images with delete and edit ajax buttons
                $form[$current_fieldset]['image_manager'] = array(
                  '#type' => 'container',
                  '#tree' => TRUE,
                );
                $image_count = 0;
                foreach($images as $key=>$image) {
                  $magento_media->render_image_manager_element($form, $key, $image, $current_fieldset, true);
                  $image_count = $key;
                }
                //make add button
                $magento_media->render_image_manager_element($form, ($image_count+1), null, $current_fieldset, false);
                //have an add image button
                dpm($images);
                //$form[$current_fieldset][] = $magento_media->render_marketspace_image_input($images[0]->url);
            }
          } else { //not a regular attribute could be categories, custom attributes, images etc
          	if($component['type'] != 'pagebreak') {
  						if($component['type'] == 'markup') {
  							$form[$current_fieldset][$component['form_key']] = array(
  								'#markup' => t('!value', array('!value'=>$component['value'])), //$component['form_key']['value'];
  								'#type' => $component['type'],
  							);
  						} elseif($component['type'] == 'fieldset') {
  		          $form[$component['form_key']] = array(
  		          	'#type' => $component['type'],
  	            	'#title' => '',
  	            	'#prefix' => "<h2 class='product-edit-group-marketspace-tab'>" . $component['name'] . "</h2><div class='product-edit-group-marketspace'>",
  	            	'#suffix' => "</div>",
  	            	'#collapsible' => ($component['extra']['collapsible'] == 1) ? 0 : 0,
  	            	'#collapsed' => ($component['extra']['collapsed'] == 1) ? 0 : 0,
  	          	);
  							$current_fieldset = $component['form_key'];
  						}
  					}
          }
        }
        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
      	return $form;
      } elseif(count($node_webform_id) > 1) {
      	drupal_set_message(t('Too many forms matching this product Error: more than one attribute set'), 'error');
      } else {
      	drupal_set_message(t('No forms matching this product Error: incorrect or non existent attribute set'), 'error');
      }
   }
}

/*
 * ajax functions for image edit, delete,
 * and add. These have to be seperated from magento
 * attribute operations since the api for product
 * create does not include them
 * TODO: - will add similar callback for upsells, 
 * custom options, and bundled products.
 */
function edit_marketspace_image_callback($form, $form_state) {
  watchdog('image-edit', "form state thine form <pre>%form_state</pre>", array("form_state" => print_r($form_state,true)),WATCHDOG_NOTICE);
  if($form_state['input']['_triggering_element_value'] == "Edit") {
    $xml = str_replace(array('<!--','-->'),'',$form_state['triggering_element']['#prefix']);
    $image_attributes = simplexml_load_string($xml);
    //$index = (int)$attributes->index;
    /*$data = new stdClass();
    $data->label = $form_state['input']['image_manager'][$index]['image_container']['options']['label'];
    $data->position = $form_state['input']['image_manager'][$index]['image_container']['options']['position'];
    $data->file = $form_state['input']['image_manager'][$index]['image_container']['file'];
    $image_url = $form_state['input']['image_manager'][$index]['image_container']['url'];*/
    $magento_media = new magento_media;
    $data = $magento_media->get_marketspace_media_data($form_state['input'], $image_attributes, false);
    $update_data = $magento_media->get_magento_media_data($data);
    $result = $magento_media->update_media_by_product_id($form_state['input']['product_id'], $update_data);
  } elseif($form_state['input']['_triggering_element_value'] == "Delete") {
    $xml = str_replace(array('<!--','-->'),'',$form_state['triggering_element']['#prefix']);
    $attributes = simplexml_load_string($xml);
    $index = (int)$attributes->index;
    $magento_media = new magento_media;
    $result = $magento_media->remove_media_by_product_id($form_state['input']['product_id'], $form_state['input']['image_manager'][$index]['image_container']['file']);
  } elseif($form_state['input']['_triggering_element_value'] == "Add") {
    $xml = str_replace(array('<!--','-->'),'',$form_state['triggering_element']['#prefix']);
    $attributes = simplexml_load_string($xml);
    $index = (int)$attributes->index;
    $magento_media = new magento_media;
    //$data = $magento_media->get_marketspace_media_data($form_state['input'], $parent_container = 'image_manager', $index, $container_name = 'image_container', $options_container = 'options');
    
    //$magento_media->process_managed_file($image_fid);
     watchdog('image-edit', "INFO <pre>%form_state</pre> <br />result %add_result", array("form_state" => print_r($form_state,true), '%add_result'=>$result),WATCHDOG_NOTICE);
    //$result = $magento_media->remove_media_by_product_id($form_state['input']['product_id'], $form_state['input']['image_manager'][$index]['image_container']['file']);
  }
  return null;
}

function product_edit_form_submit(&$form, &$form_state) {
	$product = new magento_product;
	$data = $product->getProductDataArray($form_state);
  //echo "<pre>" . print_r($form_state,true) . "</pre>";
  //die;
	$result = $product->updateProduct($form_state['input']['product_id'], $data);
	if($result) {
		drupal_set_message(t("Product has been updated."), 'notice');
	} else {
		drupal_set_message(t("Product update failed."), 'error');
	}
 	//echo "<pre>" . print_r($data,true) . "</pre>";
	//die;
  //$form_state['redirect'] = 'user';
}
/**
 * Implements hook_webform_select_options_info().
 */
/*function es_webform_webform_select_options_info() {
  $options['payment_method'] = array(
    'title' => t('Payment methods'),
    'options callback' => 'payment_method_options',
  );
  $options['payment_status'] = array(
    'title' => t('Payment statuses'),
    'options callback' => 'payment_status_options',
  );

  return $options;
}*/

/**
 * Implements hook_webform_component_info().
 */
function es_webform_webform_component_info() {
  $components['es_webform'] = array(
    'label' => t('Magento Attribute'),
    'description' => t('Lets users pay before being able to submit a webform.'),
    'features' => array(
      'default_value' => FALSE,
      'required' => TRUE,
    ),
    'file' => 'es_webform.webform.inc',
  );

  return $components;
}

/* add js and css 
 * see webform.module line 1857 webform_client_form
 * function for a good example
 * any webform will be webform_client_form_(nid)
 * so webform_client_form_2
 */
function es_webform_form_alter(&$form, $form_state, $form_id){
  if($form_id == "webform_component_edit_form") {
    //$form['validation']['#disabled'] = TRUE;
    //$form['validation']['#collapsed'] = TRUE;
  }
  if($form_id == "webform_client_form_2") {
    $form['#attached'] = array(
     'js' => array(drupal_get_path('module', 'es_category') . '/js/toggle_category.js'),
     'css' => array(drupal_get_path('module', 'es_category') . '/css/custom_components.css'),
    );
   }
}