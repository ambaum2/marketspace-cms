<?php

class PaymentEntityPermissionWebTestCase extends PaymentWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment permissions',
      'group' => 'Payment',
      'dependencies' => array('payment', 'xtools'),
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules + array('payment', 'xtools'));
  }

  function testPaymentEntityPermissions() {
    $payment_1 = $this->paymentCreate(1);
    $payment_2 = $this->paymentCreate(2);

    // Create a payment.
    $this->XtoolsAssertEntityPermission(NULL, 'Payment', 'payment_access', 'create', array(), array(
      'anonymous' => TRUE,
      'authenticated_without_permissions' => TRUE,
    ));

    // Update a payment that belongs to user 1.
    $this->XtoolsAssertEntityPermission($payment_1, 'Payment', 'payment_access', 'update', array('payment.payment.update.any'));

    // Update a payment that belongs to user 2.
    $this->XtoolsAssertEntityPermission($payment_2, 'Payment', 'payment_access', 'update', array('payment.payment.update.own'));

    // Delete a payment that belongs to user 1.
    $this->XtoolsAssertEntityPermission($payment_1, 'Payment', 'payment_access', 'delete', array('payment.payment.delete.any'));

    // Delete a payment that belongs to user 2.
    $this->XtoolsAssertEntityPermission($payment_2, 'Payment', 'payment_access', 'delete', array('payment.payment.delete.own'));

    // View a payment that belongs to user 1.
    $this->XtoolsAssertEntityPermission($payment_1, 'Payment', 'payment_access', 'view', array('payment.payment.view.any'));

    // View a payment that belongs to user 2.
    $this->XtoolsAssertEntityPermission($payment_2, 'Payment', 'payment_access', 'view', array('payment.payment.view.own'));
  }
}